import os
import time

import google.generativeai as genai
import telebot
from dotenv import load_dotenv

import texts
from database import (add_user, check_user, be_active, get_channel_ids, get_user_profile)
from keyboards import channels_url, menu

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))


@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user = message.from_user
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = check_subscription(user_id)
    action = "/start"
    name = f"<a href='https://t.me/{user.username}'>{user.first_name}</a>"
    if not check_user(user_id):
        add_user(user_id)
        if is_subscribed == '–ù–ï–¢':
            be_active(user_id, action)
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            text = (f"<b>üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {name if user.username else user.first_name}</b>"
                    f"<i>\nüëá–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</i>")
            bot.send_message(user_id, text, reply_markup=channels_url(), parse_mode='HTML',
                             disable_web_page_preview=True)
        elif is_subscribed == '–î–ê':
            be_active(user_id, action)
            bot.send_message(user_id, f"<b>üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {name if user.username else user.first_name}</b>",
                             parse_mode='HTML', disable_web_page_preview=True, reply_markup=menu(user_id))
    else:
        if is_subscribed == '–ù–ï–¢':
            be_active(user_id, action)
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            text = (f"üëã<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {name if user.username else user.first_name}</b>"
                    f"<i>\nüëá–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</i>")
            bot.send_message(user_id, text, reply_markup=channels_url(), parse_mode="HTML",
                             disable_web_page_preview=True)
        elif is_subscribed == '–î–ê':
            be_active(user_id, action)
            bot.send_message(user_id, f"<b>üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {name if user.username else user.first_name}</b>",
                             parse_mode="HTML", disable_web_page_preview=True, reply_markup=menu(user_id))


def check_subscription(user_id):
    try:
        channel_ids = get_channel_ids()
        for channel_id in channel_ids:
            try:
                result = bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                if result.status in ["administrator", "creator", "member"]:
                    return "–î–ê"
                else:
                    return "–ù–ï–¢"
            except telebot.apihelper.ApiException:
                return "–ù–ï–¢"
    except telebot.apihelper.ApiException as e:
        return "–ù–ï–¢"


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id
    user = call.from_user
    name = f"<a href='https://t.me/{user.username}'>{user.first_name}</a>"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = check_subscription(user_id)
    if is_subscribed == '–î–ê':
        bot.answer_callback_query(call.id, '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã')
        time.sleep(1)
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(chat_id=user_id, text=f"<b>üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! {name if user.username else user.first_name}</b>",
                         parse_mode="HTML", disable_web_page_preview=True, reply_markup=menu(user_id))

    else:
        bot.answer_callback_query(call.id, '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã')
        time.sleep(1)
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(chat_id=user_id,
                         text="<i>üëá–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ:</i>",
                         reply_markup=channels_url(), parse_mode="HTML", disable_web_page_preview=True)


@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    user_id, balance, plan = get_user_profile(call.from_user.id)
    is_subscribed = check_subscription(user_id)
    user = call.from_user
    name = f"<a href='https://t.me/{user.username}'>{user.first_name}</a>"

    if is_subscribed == '–î–ê':
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text=f"<b>üë§–ü—Ä–æ—Ñ–∏–ª—å:\n\n"
                                   f"üÜî: <i>{user_id}</i>\n"
                                   f"üöÄ: <i>–ü–æ–¥–ø–∏—Å–∫–∞ {plan}</i>\n"
                                   f"üí∞: <i>{balance} –∑–∞–ø—Ä–æ—Å–æ–≤</i>\n</b>",
                              parse_mode="HTML", disable_web_page_preview=True)
    else:
        bot.send_message(chat_id=user_id, text=f"<b>{name if user.username else user.first_name}</b>\n"
                                               f"<i>‚ùå–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. üëá–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                               f"–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</i>", reply_markup=channels_url(),
                         parse_mode='HTML', disable_web_page_preview=True)


@bot.callback_query_handler(func=lambda call: call.data == "plans")
def plans(call):
    user_id = call.from_user.id
    bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                          text=texts.see_plans,
                          parse_mode="HTML", disable_web_page_preview=True)


@bot.message_handler(func=lambda message: message.chat.type == "private")
def generate_text(message):
    user_id, balance, plan = get_user_profile(message.from_user.id)
    user = message.from_user
    name = f"<a href='https://t.me/{user.username}'>{user.first_name}</a>"
    model = genai.GenerativeModel("gemini-1.5-flash")

    if balance == 0:
        bot.send_message(user_id, f'{name if user.username else user.first_name} –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å 0 –∑–∞–ø—Ä–æ—Å–æ–≤',
                         reply_markup=menu(user_id), parse_mode='HTML', disable_web_page_preview=True)
    else:
        response = model.generate_content(message.text).text
        if response:
            bot.send_message(user_id, response, parse_mode='HTML', disable_web_page_preview=True)
        else:
            bot.send_message(user_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É',
                             reply_markup=menu(user_id), parse_mode='HTML', disable_web_page_preview=True)


@bot.message_handler(content_types=['photo'])
def answer_photo(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_id = message.photo[-1].file_id
    text = message.caption
    if text:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file_info = bot.get_file(photo_id)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        response = bot.download_file(file_info.file_path)
        file_path = os.path.join('media', f"{message.message_id}.jpg")

        with open(file_path, 'wb') as f:
            f.write(response)
        file = genai.upload_file(f'media/{message.message_id}.jpg')
        model = genai.GenerativeModel("gemini-1.5-flash")
        result = model.generate_content(
            [file, "\n\n", text]
        )
        if result:
            bot.send_message(message.chat.id, result.text, parse_mode='HTML', disable_web_page_preview=True)
            os.remove(f'media/{message.message_id}.jpg')
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É',
                             parse_mode='HTML', disable_web_page_preview=True)
    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file_info = bot.get_file(photo_id)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        response = bot.download_file(file_info.file_path)
        file_path = os.path.join('media', f"{message.message_id}.jpg")

        with open(file_path, 'wb') as f:
            f.write(response)
        file = genai.upload_file(f'media/{message.message_id}.jpg')
        model = genai.GenerativeModel("gemini-1.5-flash")
        result = model.generate_content(
            [file, "\n\n", '–û—Ç–≤–µ—Ç—å –ø–æ —ç—Ç–æ–º—É —Ñ–æ—Ç–æ']
        )
        if result:
            bot.send_message(message.chat.id, result.text, parse_mode='HTML', disable_web_page_preview=True)
            os.remove(f'media/{message.message_id}.jpg')
        else:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É',
                             parse_mode='HTML', disable_web_page_preview=True)


if __name__ == "__main__":
    bot.infinity_polling()
